using DifferentialEquations
using DelimitedFiles
using CSV

function solveODE(f, u0, vars, tspan, t, M, N)
    y = zeros(N,vars) # (simulation, variable)
    for sim in 1:N
        p = M[sim,:]
        prob = ODEProblem(f,u0,tspan,p)
        sol = solve(prob, Rosenbrock23())

        for variable in 1:vars
            y[sim,variable] = sol.u[t][variable]
        end

    end
    return y # matrix of model outputs
end

ψ(u, γ) = u./(γ+u)

function f(du,u,p0,t)
    B, E, M, a, h, p = u
    βb, γp, q, βE1, γa, γB, βE2, βM1, βM2, γh, βa, μaE, μaM, βh1, βh2, μhM, βp, μpB, μpE = p0

    du[1]= βb.*ψ(u[6],γp).*u[1] - q.*u[1]
    du[2] = (βE1.*ψ(u[4], γa) + βE2.*(1-ψ(u[1], γB)).*ψ(u[6], γp)).*u[2] - q.*u[2]
    du[3] = (βM1.*ψ(u[4], γa) + βM2.*ψ(u[5], γh)).*u[3] - q.*u[3]

    du[4] = βa.*ψ(u[6], γp).*u[1] - q.*u[4] - (μaE.*u[2] + μaM.*u[3]).*u[4]
    du[5] = βh1.*ψ(u[4], γa).*u[2] + βh2.*ψ(u[6], γp).*u[1] - q.*u[5] - μhM.*u[5].*u[3]
    du[6] = βp.*q.*(cos.(t)+1).^3 - q.*u[6] - (μpB.*u[1] + μpE.*u[2]).*u[6]
end

u0 = [0.0004706; 0.0004706; 0.0004706; 9.7079; 7.9551; 32.061]
tspan = (0.0,50.0);
N = 2^18
t = 50
vars = 6

csv_paths = ["B.csv"; "C_1.csv"; "C_2.csv"; "C_3.csv"; "C_4.csv"; "C_5.csv"; "C_6.csv"]
for(i in 1:7)
    M = CSV.read(csv_paths[i])
    M_sol = solveODE(f, u0, vars, tspan, t, M, N)
    writedlm("C_1_sol.csv",  M_sol, ',')
end
